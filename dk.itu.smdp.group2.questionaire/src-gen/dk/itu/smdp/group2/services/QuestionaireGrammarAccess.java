/*
* generated by Xtext
*/
package dk.itu.smdp.group2.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class QuestionaireGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QuestionaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Questionaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEmailKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResultEmailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResultEmailEStringParserRuleCall_2_0 = (RuleCall)cResultEmailAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		
		//Questionaire:
		//	name= // Eating Habbits
		//	EString "email:" resultEmail= // email: ragr@itu.dk
		//	EString (elements+=Element elements+=Element*)? // Alle questions (minimum 1)
		//;
		public ParserRule getRule() { return rule; }

		//name= // Eating Habbits
		//EString "email:" resultEmail= // email: ragr@itu.dk
		//EString (elements+=Element elements+=Element*)? // Alle questions (minimum 1)
		public Group getGroup() { return cGroup; }

		//name= // Eating Habbits
		//EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//// Eating Habbits
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"email:"
		public Keyword getEmailKeyword_1() { return cEmailKeyword_1; }

		//resultEmail= // email: ragr@itu.dk
		//EString
		public Assignment getResultEmailAssignment_2() { return cResultEmailAssignment_2; }

		//// email: ragr@itu.dk
		//EString
		public RuleCall getResultEmailEStringParserRuleCall_2_0() { return cResultEmailEStringParserRuleCall_2_0; }

		//(elements+=Element elements+=Element*)?
		public Group getGroup_3() { return cGroup_3; }

		//elements+=Element
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//Element
		public RuleCall getElementsElementParserRuleCall_3_0_0() { return cElementsElementParserRuleCall_3_0_0; }

		//elements+=Element*
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//Element
		public RuleCall getElementsElementParserRuleCall_3_1_0() { return cElementsElementParserRuleCall_3_1_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHeadingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParagraphParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextQuestionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChoiceQuestionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMatrixQuestionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCalendarQuestionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIntegerQuestionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Element:
		//	Heading | Paragraph | TextQuestion | ChoiceQuestion | MatrixQuestion | CalendarQuestion | IntegerQuestion;
		public ParserRule getRule() { return rule; }

		//Heading | Paragraph | TextQuestion | ChoiceQuestion | MatrixQuestion | CalendarQuestion | IntegerQuestion
		public Alternatives getAlternatives() { return cAlternatives; }

		//Heading
		public RuleCall getHeadingParserRuleCall_0() { return cHeadingParserRuleCall_0; }

		//Paragraph
		public RuleCall getParagraphParserRuleCall_1() { return cParagraphParserRuleCall_1; }

		//TextQuestion
		public RuleCall getTextQuestionParserRuleCall_2() { return cTextQuestionParserRuleCall_2; }

		//ChoiceQuestion
		public RuleCall getChoiceQuestionParserRuleCall_3() { return cChoiceQuestionParserRuleCall_3; }

		//MatrixQuestion
		public RuleCall getMatrixQuestionParserRuleCall_4() { return cMatrixQuestionParserRuleCall_4; }

		//CalendarQuestion
		public RuleCall getCalendarQuestionParserRuleCall_5() { return cCalendarQuestionParserRuleCall_5; }

		//IntegerQuestion
		public RuleCall getIntegerQuestionParserRuleCall_6() { return cIntegerQuestionParserRuleCall_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class HeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Heading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Heading:
		//	"#" text= // #Blablabla heading woo
		//	EString;
		public ParserRule getRule() { return rule; }

		//"#" text= // #Blablabla heading woo
		//EString
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//text= // #Blablabla heading woo
		//EString
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//// #Blablabla heading woo
		//EString
		public RuleCall getTextEStringParserRuleCall_1_0() { return cTextEStringParserRuleCall_1_0; }
	}

	public class ParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Paragraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Paragraph:
		//	"!" text= // !Tell me your eating habbits
		//	EString;
		public ParserRule getRule() { return rule; }

		//"!" text= // !Tell me your eating habbits
		//EString
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//text= // !Tell me your eating habbits
		//EString
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//// !Tell me your eating habbits
		//EString
		public RuleCall getTextEStringParserRuleCall_1_0() { return cTextEStringParserRuleCall_1_0; }
	}

	public class QuestionBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuestionBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Assignment cMandatoryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMandatoryAsteriskKeyword_2_0 = (Keyword)cMandatoryAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionEStringParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cConditionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionsQuestionConditionParserRuleCall_4_0 = (RuleCall)cConditionsAssignment_4.eContents().get(0);
		
		//QuestionBase:
		//	"?" title=EString mandatory?="*"? // ?Hvad er din ynglingsmad (*)
		//	description=EString? conditions+=QuestionCondition*;
		public ParserRule getRule() { return rule; }

		//"?" title=EString mandatory?="*"? // ?Hvad er din ynglingsmad (*)
		//description=EString? conditions+=QuestionCondition*
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//title=EString
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_1_0() { return cTitleEStringParserRuleCall_1_0; }

		//mandatory?="*"?
		public Assignment getMandatoryAssignment_2() { return cMandatoryAssignment_2; }

		//"*"
		public Keyword getMandatoryAsteriskKeyword_2_0() { return cMandatoryAsteriskKeyword_2_0; }

		//description=EString?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//EString
		public RuleCall getDescriptionEStringParserRuleCall_3_0() { return cDescriptionEStringParserRuleCall_3_0; }

		//conditions+=QuestionCondition*
		public Assignment getConditionsAssignment_4() { return cConditionsAssignment_4; }

		//QuestionCondition
		public RuleCall getConditionsQuestionConditionParserRuleCall_4_0() { return cConditionsQuestionConditionParserRuleCall_4_0; }
	}

	public class TextQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuestionBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuestionBaseQuestionBaseParserRuleCall_0_0 = (RuleCall)cQuestionBaseAssignment_0.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMultilineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMultilineLongKeyword_2_0 = (Keyword)cMultilineAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TextQuestion:
		//	questionBase=QuestionBase "text[" multiline?="long" // text[long]
		//	"]";
		public ParserRule getRule() { return rule; }

		//questionBase=QuestionBase "text[" multiline?="long" // text[long]
		//"]"
		public Group getGroup() { return cGroup; }

		//questionBase=QuestionBase
		public Assignment getQuestionBaseAssignment_0() { return cQuestionBaseAssignment_0; }

		//QuestionBase
		public RuleCall getQuestionBaseQuestionBaseParserRuleCall_0_0() { return cQuestionBaseQuestionBaseParserRuleCall_0_0; }

		//"text["
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }

		//multiline?="long"
		public Assignment getMultilineAssignment_2() { return cMultilineAssignment_2; }

		//"long"
		public Keyword getMultilineLongKeyword_2_0() { return cMultilineLongKeyword_2_0; }

		//// text[long]
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ChoiceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoiceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuestionBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuestionBaseQuestionBaseParserRuleCall_0_0 = (RuleCall)cQuestionBaseAssignment_0.eContents().get(0);
		private final Keyword cChoiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cMinSelectionsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cMinSelectionsEIntParserRuleCall_2_0_0 = (RuleCall)cMinSelectionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cMinSelectionsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cMinSelectionsEIntParserRuleCall_2_1_0_0 = (RuleCall)cMinSelectionsAssignment_2_1_0.eContents().get(0);
		private final Keyword cToKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cMaxSelectionsAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cMaxSelectionsEIntParserRuleCall_2_1_2_0 = (RuleCall)cMaxSelectionsAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOptionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptionsOptionParserRuleCall_4_0 = (RuleCall)cOptionsAssignment_4.eContents().get(0);
		
		//ChoiceQuestion:
		//	questionBase=QuestionBase "choice[" (minSelections=EInt | minSelections=EInt "to" maxSelections=EInt) "]"
		//	options+=Option+;
		public ParserRule getRule() { return rule; }

		//questionBase=QuestionBase "choice[" (minSelections=EInt | minSelections=EInt "to" maxSelections=EInt) "]"
		//options+=Option+
		public Group getGroup() { return cGroup; }

		//questionBase=QuestionBase
		public Assignment getQuestionBaseAssignment_0() { return cQuestionBaseAssignment_0; }

		//QuestionBase
		public RuleCall getQuestionBaseQuestionBaseParserRuleCall_0_0() { return cQuestionBaseQuestionBaseParserRuleCall_0_0; }

		//"choice["
		public Keyword getChoiceKeyword_1() { return cChoiceKeyword_1; }

		//minSelections=EInt | minSelections=EInt "to" maxSelections=EInt
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//minSelections=EInt
		public Assignment getMinSelectionsAssignment_2_0() { return cMinSelectionsAssignment_2_0; }

		//EInt
		public RuleCall getMinSelectionsEIntParserRuleCall_2_0_0() { return cMinSelectionsEIntParserRuleCall_2_0_0; }

		//minSelections=EInt "to" maxSelections=EInt
		public Group getGroup_2_1() { return cGroup_2_1; }

		//minSelections=EInt
		public Assignment getMinSelectionsAssignment_2_1_0() { return cMinSelectionsAssignment_2_1_0; }

		//EInt
		public RuleCall getMinSelectionsEIntParserRuleCall_2_1_0_0() { return cMinSelectionsEIntParserRuleCall_2_1_0_0; }

		//"to"
		public Keyword getToKeyword_2_1_1() { return cToKeyword_2_1_1; }

		//maxSelections=EInt
		public Assignment getMaxSelectionsAssignment_2_1_2() { return cMaxSelectionsAssignment_2_1_2; }

		//EInt
		public RuleCall getMaxSelectionsEIntParserRuleCall_2_1_2_0() { return cMaxSelectionsEIntParserRuleCall_2_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//options+=Option+
		public Assignment getOptionsAssignment_4() { return cOptionsAssignment_4; }

		//Option
		public RuleCall getOptionsOptionParserRuleCall_4_0() { return cOptionsOptionParserRuleCall_4_0; }
	}

	public class MatrixQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatrixQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuestionBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuestionBaseQuestionBaseParserRuleCall_0_0 = (RuleCall)cQuestionBaseAssignment_0.eContents().get(0);
		private final Keyword cMatrixKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMaxPerRowAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxPerRowEIntParserRuleCall_2_0 = (RuleCall)cMaxPerRowAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cColumnNamesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cColumnNamesEStringParserRuleCall_4_0_0 = (RuleCall)cColumnNamesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cColumnNamesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cColumnNamesEStringParserRuleCall_4_1_1_0 = (RuleCall)cColumnNamesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRowNamesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRowNamesEStringParserRuleCall_5_1_0 = (RuleCall)cRowNamesAssignment_5_1.eContents().get(0);
		
		//MatrixQuestion:
		//	questionBase= // Description
		//	QuestionBase "matrix[" maxPerRow=EInt "][" (columnNames+=EString ("," columnNames+=EString)* "]")? // matrix[maxPerRow][columnNames+]
		//	("-" rowNames+=EString)+ // -rownames
		//;
		public ParserRule getRule() { return rule; }

		//questionBase= // Description
		//QuestionBase "matrix[" maxPerRow=EInt "][" (columnNames+=EString ("," columnNames+=EString)* "]")? // matrix[maxPerRow][columnNames+]
		//("-" rowNames+=EString)+ // -rownames
		public Group getGroup() { return cGroup; }

		//questionBase= // Description
		//QuestionBase
		public Assignment getQuestionBaseAssignment_0() { return cQuestionBaseAssignment_0; }

		//// Description
		//QuestionBase
		public RuleCall getQuestionBaseQuestionBaseParserRuleCall_0_0() { return cQuestionBaseQuestionBaseParserRuleCall_0_0; }

		//"matrix["
		public Keyword getMatrixKeyword_1() { return cMatrixKeyword_1; }

		//maxPerRow=EInt
		public Assignment getMaxPerRowAssignment_2() { return cMaxPerRowAssignment_2; }

		//EInt
		public RuleCall getMaxPerRowEIntParserRuleCall_2_0() { return cMaxPerRowEIntParserRuleCall_2_0; }

		//"]["
		public Keyword getRightSquareBracketLeftSquareBracketKeyword_3() { return cRightSquareBracketLeftSquareBracketKeyword_3; }

		//(columnNames+=EString ("," columnNames+=EString)* "]")?
		public Group getGroup_4() { return cGroup_4; }

		//columnNames+=EString
		public Assignment getColumnNamesAssignment_4_0() { return cColumnNamesAssignment_4_0; }

		//EString
		public RuleCall getColumnNamesEStringParserRuleCall_4_0_0() { return cColumnNamesEStringParserRuleCall_4_0_0; }

		//("," columnNames+=EString)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//columnNames+=EString
		public Assignment getColumnNamesAssignment_4_1_1() { return cColumnNamesAssignment_4_1_1; }

		//EString
		public RuleCall getColumnNamesEStringParserRuleCall_4_1_1_0() { return cColumnNamesEStringParserRuleCall_4_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//("-" rowNames+=EString)+
		public Group getGroup_5() { return cGroup_5; }

		//"-"
		public Keyword getHyphenMinusKeyword_5_0() { return cHyphenMinusKeyword_5_0; }

		//rowNames+=EString
		public Assignment getRowNamesAssignment_5_1() { return cRowNamesAssignment_5_1; }

		//EString
		public RuleCall getRowNamesEStringParserRuleCall_5_1_0() { return cRowNamesEStringParserRuleCall_5_1_0; }
	}

	public class CalendarQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CalendarQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuestionBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuestionBaseQuestionBaseParserRuleCall_0_0 = (RuleCall)cQuestionBaseAssignment_0.eContents().get(0);
		private final Keyword cCalendarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cYearAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cYearYearKeyword_2_0_0 = (Keyword)cYearAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMonthAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cMonthMonthKeyword_2_2_0 = (Keyword)cMonthAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cDayAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final Keyword cDayDayKeyword_2_4_0 = (Keyword)cDayAssignment_2_4.eContents().get(0);
		private final Keyword cCommaKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cHourAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final Keyword cHourHourKeyword_2_6_0 = (Keyword)cHourAssignment_2_6.eContents().get(0);
		private final Keyword cCommaKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Assignment cMinuteAssignment_2_8 = (Assignment)cGroup_2.eContents().get(8);
		private final Keyword cMinuteMinuteKeyword_2_8_0 = (Keyword)cMinuteAssignment_2_8.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CalendarQuestion:
		//	questionBase=QuestionBase //'calendar[' ((year?=	'year'	)? ','?) &  TODO: VIRKER IKKE
		//	//			((month?=	'month'	)? ','?) & 
		//	//			((day?=		'day'	)? ','?) & 
		//	//			((hour?=	'hour'	)? ','?) & 
		//	//			((minute?=	'minute')? ','?) ']'
		//	// [year, day,] [month, day, hour] [hour minute] [minute, day, hour,]
		//	"calendar[" (year?="year"? ","? month?="month"? ","? day?="day"? ","? hour?="hour"? ","? minute?="minute"?) // TODO: Det er nu muligt at lave calendar[]
		//	"]";
		public ParserRule getRule() { return rule; }

		//questionBase=QuestionBase //'calendar[' ((year?=	'year'	)? ','?) &  TODO: VIRKER IKKE
		////			((month?=	'month'	)? ','?) & 
		////			((day?=		'day'	)? ','?) & 
		////			((hour?=	'hour'	)? ','?) & 
		////			((minute?=	'minute')? ','?) ']'
		//// [year, day,] [month, day, hour] [hour minute] [minute, day, hour,]
		//"calendar[" (year?="year"? ","? month?="month"? ","? day?="day"? ","? hour?="hour"? ","? minute?="minute"?) // TODO: Det er nu muligt at lave calendar[]
		//"]"
		public Group getGroup() { return cGroup; }

		//questionBase=QuestionBase
		public Assignment getQuestionBaseAssignment_0() { return cQuestionBaseAssignment_0; }

		//QuestionBase
		public RuleCall getQuestionBaseQuestionBaseParserRuleCall_0_0() { return cQuestionBaseQuestionBaseParserRuleCall_0_0; }

		////'calendar[' ((year?=	'year'	)? ','?) &  TODO: VIRKER IKKE
		////			((month?=	'month'	)? ','?) & 
		////			((day?=		'day'	)? ','?) & 
		////			((hour?=	'hour'	)? ','?) & 
		////			((minute?=	'minute')? ','?) ']'
		//// [year, day,] [month, day, hour] [hour minute] [minute, day, hour,]
		//"calendar["
		public Keyword getCalendarKeyword_1() { return cCalendarKeyword_1; }

		//year?="year"? ","? month?="month"? ","? day?="day"? ","? hour?="hour"? ","? minute?="minute"?
		public Group getGroup_2() { return cGroup_2; }

		//year?="year"?
		public Assignment getYearAssignment_2_0() { return cYearAssignment_2_0; }

		//"year"
		public Keyword getYearYearKeyword_2_0_0() { return cYearYearKeyword_2_0_0; }

		//","?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//month?="month"?
		public Assignment getMonthAssignment_2_2() { return cMonthAssignment_2_2; }

		//"month"
		public Keyword getMonthMonthKeyword_2_2_0() { return cMonthMonthKeyword_2_2_0; }

		//","?
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//day?="day"?
		public Assignment getDayAssignment_2_4() { return cDayAssignment_2_4; }

		//"day"
		public Keyword getDayDayKeyword_2_4_0() { return cDayDayKeyword_2_4_0; }

		//","?
		public Keyword getCommaKeyword_2_5() { return cCommaKeyword_2_5; }

		//hour?="hour"?
		public Assignment getHourAssignment_2_6() { return cHourAssignment_2_6; }

		//"hour"
		public Keyword getHourHourKeyword_2_6_0() { return cHourHourKeyword_2_6_0; }

		//","?
		public Keyword getCommaKeyword_2_7() { return cCommaKeyword_2_7; }

		//minute?="minute"?
		public Assignment getMinuteAssignment_2_8() { return cMinuteAssignment_2_8; }

		//"minute"
		public Keyword getMinuteMinuteKeyword_2_8_0() { return cMinuteMinuteKeyword_2_8_0; }

		//// TODO: Det er nu muligt at lave calendar[]
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class IntegerQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuestionBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuestionBaseQuestionBaseParserRuleCall_0_0 = (RuleCall)cQuestionBaseAssignment_0.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinValueEIntParserRuleCall_2_0 = (RuleCall)cMinValueAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMaxValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMaxValueEIntParserRuleCall_4_0 = (RuleCall)cMaxValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cStepKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStepAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStepEIntParserRuleCall_5_1_0 = (RuleCall)cStepAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IntegerQuestion:
		//	questionBase=QuestionBase "number[" minValue=EInt "to" maxValue=EInt ("step" step=EInt)? "]";
		public ParserRule getRule() { return rule; }

		//questionBase=QuestionBase "number[" minValue=EInt "to" maxValue=EInt ("step" step=EInt)? "]"
		public Group getGroup() { return cGroup; }

		//questionBase=QuestionBase
		public Assignment getQuestionBaseAssignment_0() { return cQuestionBaseAssignment_0; }

		//QuestionBase
		public RuleCall getQuestionBaseQuestionBaseParserRuleCall_0_0() { return cQuestionBaseQuestionBaseParserRuleCall_0_0; }

		//"number["
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }

		//minValue=EInt
		public Assignment getMinValueAssignment_2() { return cMinValueAssignment_2; }

		//EInt
		public RuleCall getMinValueEIntParserRuleCall_2_0() { return cMinValueEIntParserRuleCall_2_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//maxValue=EInt
		public Assignment getMaxValueAssignment_4() { return cMaxValueAssignment_4; }

		//EInt
		public RuleCall getMaxValueEIntParserRuleCall_4_0() { return cMaxValueEIntParserRuleCall_4_0; }

		//("step" step=EInt)?
		public Group getGroup_5() { return cGroup_5; }

		//"step"
		public Keyword getStepKeyword_5_0() { return cStepKeyword_5_0; }

		//step=EInt
		public Assignment getStepAssignment_5_1() { return cStepAssignment_5_1; }

		//EInt
		public RuleCall getStepEIntParserRuleCall_5_1_0() { return cStepEIntParserRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class QuestionConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuestionCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOptionOptionCrossReference_1_0 = (CrossReference)cOptionAssignment_1.eContents().get(0);
		private final RuleCall cOptionOptionEStringParserRuleCall_1_0_1 = (RuleCall)cOptionOptionCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOptionOptionCrossReference_2_1_0 = (CrossReference)cOptionAssignment_2_1.eContents().get(0);
		private final RuleCall cOptionOptionEStringParserRuleCall_2_1_0_1 = (RuleCall)cOptionOptionCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//QuestionCondition:
		//	"{" option+=[Option|EString] ("/" option+=[Option|EString])* // TODO: Why Option|EString? We only want to demand the id 
		//	"}";
		public ParserRule getRule() { return rule; }

		//"{" option+=[Option|EString] ("/" option+=[Option|EString])* // TODO: Why Option|EString? We only want to demand the id 
		//"}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//option+=[Option|EString]
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }

		//[Option|EString]
		public CrossReference getOptionOptionCrossReference_1_0() { return cOptionOptionCrossReference_1_0; }

		//EString
		public RuleCall getOptionOptionEStringParserRuleCall_1_0_1() { return cOptionOptionEStringParserRuleCall_1_0_1; }

		//("/" option+=[Option|EString])*
		public Group getGroup_2() { return cGroup_2; }

		//"/"
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }

		//option+=[Option|EString]
		public Assignment getOptionAssignment_2_1() { return cOptionAssignment_2_1; }

		//[Option|EString]
		public CrossReference getOptionOptionCrossReference_2_1_0() { return cOptionOptionCrossReference_2_1_0; }

		//EString
		public RuleCall getOptionOptionEStringParserRuleCall_2_1_0_1() { return cOptionOptionEStringParserRuleCall_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Option:
		//	"-" text=EString ("{" name=EString "}")?;
		public ParserRule getRule() { return rule; }

		//"-" text=EString ("{" name=EString "}")?
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//text=EString
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//EString
		public RuleCall getTextEStringParserRuleCall_1_0() { return cTextEStringParserRuleCall_1_0; }

		//("{" name=EString "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//name=EString
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_1_0() { return cNameEStringParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private QuestionaireElements pQuestionaire;
	private ElementElements pElement;
	private EStringElements pEString;
	private HeadingElements pHeading;
	private ParagraphElements pParagraph;
	private QuestionBaseElements pQuestionBase;
	private TextQuestionElements pTextQuestion;
	private ChoiceQuestionElements pChoiceQuestion;
	private MatrixQuestionElements pMatrixQuestion;
	private CalendarQuestionElements pCalendarQuestion;
	private IntegerQuestionElements pIntegerQuestion;
	private EBooleanElements pEBoolean;
	private QuestionConditionElements pQuestionCondition;
	private OptionElements pOption;
	private EIntElements pEInt;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public QuestionaireGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.smdp.group2.Questionaire".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Questionaire:
	//	name= // Eating Habbits
	//	EString "email:" resultEmail= // email: ragr@itu.dk
	//	EString (elements+=Element elements+=Element*)? // Alle questions (minimum 1)
	//;
	public QuestionaireElements getQuestionaireAccess() {
		return (pQuestionaire != null) ? pQuestionaire : (pQuestionaire = new QuestionaireElements());
	}
	
	public ParserRule getQuestionaireRule() {
		return getQuestionaireAccess().getRule();
	}

	//Element:
	//	Heading | Paragraph | TextQuestion | ChoiceQuestion | MatrixQuestion | CalendarQuestion | IntegerQuestion;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Heading:
	//	"#" text= // #Blablabla heading woo
	//	EString;
	public HeadingElements getHeadingAccess() {
		return (pHeading != null) ? pHeading : (pHeading = new HeadingElements());
	}
	
	public ParserRule getHeadingRule() {
		return getHeadingAccess().getRule();
	}

	//Paragraph:
	//	"!" text= // !Tell me your eating habbits
	//	EString;
	public ParagraphElements getParagraphAccess() {
		return (pParagraph != null) ? pParagraph : (pParagraph = new ParagraphElements());
	}
	
	public ParserRule getParagraphRule() {
		return getParagraphAccess().getRule();
	}

	//QuestionBase:
	//	"?" title=EString mandatory?="*"? // ?Hvad er din ynglingsmad (*)
	//	description=EString? conditions+=QuestionCondition*;
	public QuestionBaseElements getQuestionBaseAccess() {
		return (pQuestionBase != null) ? pQuestionBase : (pQuestionBase = new QuestionBaseElements());
	}
	
	public ParserRule getQuestionBaseRule() {
		return getQuestionBaseAccess().getRule();
	}

	//TextQuestion:
	//	questionBase=QuestionBase "text[" multiline?="long" // text[long]
	//	"]";
	public TextQuestionElements getTextQuestionAccess() {
		return (pTextQuestion != null) ? pTextQuestion : (pTextQuestion = new TextQuestionElements());
	}
	
	public ParserRule getTextQuestionRule() {
		return getTextQuestionAccess().getRule();
	}

	//ChoiceQuestion:
	//	questionBase=QuestionBase "choice[" (minSelections=EInt | minSelections=EInt "to" maxSelections=EInt) "]"
	//	options+=Option+;
	public ChoiceQuestionElements getChoiceQuestionAccess() {
		return (pChoiceQuestion != null) ? pChoiceQuestion : (pChoiceQuestion = new ChoiceQuestionElements());
	}
	
	public ParserRule getChoiceQuestionRule() {
		return getChoiceQuestionAccess().getRule();
	}

	//MatrixQuestion:
	//	questionBase= // Description
	//	QuestionBase "matrix[" maxPerRow=EInt "][" (columnNames+=EString ("," columnNames+=EString)* "]")? // matrix[maxPerRow][columnNames+]
	//	("-" rowNames+=EString)+ // -rownames
	//;
	public MatrixQuestionElements getMatrixQuestionAccess() {
		return (pMatrixQuestion != null) ? pMatrixQuestion : (pMatrixQuestion = new MatrixQuestionElements());
	}
	
	public ParserRule getMatrixQuestionRule() {
		return getMatrixQuestionAccess().getRule();
	}

	//CalendarQuestion:
	//	questionBase=QuestionBase //'calendar[' ((year?=	'year'	)? ','?) &  TODO: VIRKER IKKE
	//	//			((month?=	'month'	)? ','?) & 
	//	//			((day?=		'day'	)? ','?) & 
	//	//			((hour?=	'hour'	)? ','?) & 
	//	//			((minute?=	'minute')? ','?) ']'
	//	// [year, day,] [month, day, hour] [hour minute] [minute, day, hour,]
	//	"calendar[" (year?="year"? ","? month?="month"? ","? day?="day"? ","? hour?="hour"? ","? minute?="minute"?) // TODO: Det er nu muligt at lave calendar[]
	//	"]";
	public CalendarQuestionElements getCalendarQuestionAccess() {
		return (pCalendarQuestion != null) ? pCalendarQuestion : (pCalendarQuestion = new CalendarQuestionElements());
	}
	
	public ParserRule getCalendarQuestionRule() {
		return getCalendarQuestionAccess().getRule();
	}

	//IntegerQuestion:
	//	questionBase=QuestionBase "number[" minValue=EInt "to" maxValue=EInt ("step" step=EInt)? "]";
	public IntegerQuestionElements getIntegerQuestionAccess() {
		return (pIntegerQuestion != null) ? pIntegerQuestion : (pIntegerQuestion = new IntegerQuestionElements());
	}
	
	public ParserRule getIntegerQuestionRule() {
		return getIntegerQuestionAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//QuestionCondition:
	//	"{" option+=[Option|EString] ("/" option+=[Option|EString])* // TODO: Why Option|EString? We only want to demand the id 
	//	"}";
	public QuestionConditionElements getQuestionConditionAccess() {
		return (pQuestionCondition != null) ? pQuestionCondition : (pQuestionCondition = new QuestionConditionElements());
	}
	
	public ParserRule getQuestionConditionRule() {
		return getQuestionConditionAccess().getRule();
	}

	//Option:
	//	"-" text=EString ("{" name=EString "}")?;
	public OptionElements getOptionAccess() {
		return (pOption != null) ? pOption : (pOption = new OptionElements());
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
